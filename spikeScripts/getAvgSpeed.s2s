' computes average wheel velocity based on one of two rotary encoder digital outputs
' only includes velocities above velThresh to ensure periods of non-running do not drag down the velocity measurement

' user settings
var wheelChan% := 7; ' can be either channel of wheel rotary encoder
var wheelCircumference := 0.5984734005; ' circumference of wheel in meters
var encoderTicks := 1440; ' how many encoder ticks per rotation on a single encoder output (720 cpr * 2 (to account from high and low transitions))
var velThresh := .1; ' exclude velocities beneathe velThresh (m/s)
var maximumTime% := 20*60; 'only compute velocity from beggining of session to maximumTime (seconds) 


' get dts, time differences between wheel tic events
var numEvents% := Count(wheelChan%, 0, maximumTime%);
var dts[numEvents%];
ChanData(wheelChan%, dts, 0, MaxTime());
ArrDiff(dts);

' convert to velocity (m/s)
var velocity[numEvents%], i%;
for i%:= 0 to numEvents%-1 step 1 do velocity[i%] := (wheelCircumference/encoderTicks) / dts[i%]; next;

' remove velocities beneathe threshold
var velocityThreshed[numEvents%];
var velInd% := 0;
for i%:= 0 to numEvents%-1 step 1 do
    if velocity[i%] > velThresh then
        velocityThreshed[velInd%] := velocity[i%];
        velInd% += 1;
    endif;
next;
resize velocityThreshed[velInd%];

' get average velocity
var velAvg;
ArrSum(velocityThreshed, velAvg);


' report results
Message("average velocity (m/s): ", velAvg);

